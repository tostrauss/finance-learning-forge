rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if user is authenticated
    function isAuthenticated() {
      return request.auth != null;
    }
    
    // Helper function to check if user owns the document
    function isOwner(userId) {
      return isAuthenticated() && request.auth.uid == userId;
    }

    // Helper function to validate watchlist item
    function isValidWatchlistItem(item) {
      return item.size() == 4 
        && 'symbol' in item && item.symbol is string
        && 'name' in item && item.name is string
        && 'addedAt' in item && item.addedAt is string
        && 'assetType' in item && item.assetType in ['security', 'crypto', 'bond', 'commodity'];
    }

    // Helper function to validate watchlist items array
    function hasValidItems(items) {
      return items is list && items.size() <= 100 && items.every(item => isValidWatchlistItem(item));
    }

    // Watchlist collection rules
    match /watchlists/{docId} {
      // Allow read if user owns the document
      allow read: if isOwner(resource.data.userId);
      
      // Allow create if:
      // 1. User is authenticated
      // 2. userId matches auth user
      // 3. Document has all required fields
      // 4. Items is a valid array
      allow create: if isAuthenticated()
        && request.resource.data.userId == request.auth.uid
        && request.resource.data.keys().hasAll(['name', 'items', 'userId', 'createdAt', 'updatedAt'])
        && request.resource.data.name is string 
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 100
        && hasValidItems(request.resource.data.items)
        && request.resource.data.createdAt is timestamp
        && request.resource.data.updatedAt is timestamp;

      // Allow update if:
      // 1. User owns the document
      // 2. Only allowed fields are being modified
      // 3. Items array remains valid
      // 4. Can't change userId or createdAt
      allow update: if isOwner(resource.data.userId)
        && request.resource.data.diff(resource.data).affectedKeys()
           .hasOnly(['name', 'items', 'updatedAt'])
        && request.resource.data.name is string
        && request.resource.data.name.size() > 0
        && request.resource.data.name.size() <= 100
        && hasValidItems(request.resource.data.items)
        && request.resource.data.userId == resource.data.userId
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.updatedAt is timestamp;

      // Allow delete if user owns the document
      allow delete: if isOwner(resource.data.userId);
    }

    // Catch-all rule - deny everything else
    match /{document=**} {
      allow read, write: if false;
    }
  }
}
